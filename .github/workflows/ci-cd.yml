name: CI/CD Flask Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: gustavocoleto/flask-hello

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run pytest
        run: |
          export PYTHONPATH=.
          pytest tests/ -v --tb=short
      
      - name: üîç Check syntax
        run: python -m py_compile app.py

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Success
        run: |
          echo "üéâ Image built successfully!"
          echo "üì¶ Tags: ${{ steps.meta.outputs.tags }}"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Pull latest image
        run: docker pull ${{ env.DOCKER_IMAGE }}:latest
      
      - name: Run container
        run: |
          docker run -d \
            --name flask-app \
            -p 5000:5000 \
            ${{ env.DOCKER_IMAGE }}:latest
      
      - name: Wait for container to start
        run: sleep 5
      
      - name: Health check - Test endpoint
        run: |
          echo "Testing Flask app endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/)
          
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed! Status code: $response"
          else
            echo "‚ùå Health check failed! Status code: $response"
            docker logs flask-app
            exit 1
          fi
      
      - name: üîç Verify response content
        run: |
          echo "Checking response content..."
          content=$(curl -s http://localhost:5000/)
          
          if echo "$content" | grep -q "Hello, World!"; then
            echo "‚úÖ Content verification passed!"
            echo "Response: $content"
          else
            echo "‚ùå Content verification failed!"
            echo "Expected: Hello, World!"
            echo "Got: $content"
            exit 1
          fi
      
      - name: üìä Show container logs
        if: always()
        run: docker logs flask-app
      
      - name: üßπ Cleanup
        if: always()
        run: |
          docker stop flask-app || true
          docker rm flask-app || true
      
      - name: ‚úÖ Success
        run: |
          echo "üéâ All health checks passed!"
          echo "‚úÖ Container is running correctly"
          echo "‚úÖ Endpoint is responding"
          echo "‚úÖ Content is correct"